#![cfg_attr(not(feature = "std"), no_std)]

pub use pallet::*;

#[frame_support::pallet]
pub mod pallet {
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;
	use sp_std::vec::Vec;
	use sp_inherents;
	use sp_runtime;
	use log::info;
	use sp_std::str;

	type SongLine = Vec<u8>;

	#[pallet::config]
	pub trait Config: frame_system::Config {
		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
	}

	#[pallet::pallet]
	#[pallet::generate_store(pub(super) trait Store)]
	pub struct Pallet<T>(_);

	#[pallet::storage]
	#[pallet::getter(fn something)]
	pub type SongLineStorage<T> = StorageValue<_, SongLine>;

	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		/// Event emitted when a song line is proposed with a new block.
		///
		/// * `song_line` - a line song generated by `Proposer`,
		SongLineEmitted(Vec<u8>),
	}

	#[pallet::error]
	pub enum Error<T> {
		SongLineEmpty,
	}

	#[pallet::call]
	impl<T: Config> Pallet<T> {
		/// Extracts a song line from intrinsics, store in db and emit an event.
		///
		/// The dispatch origin for this call must be `Inherent`.
		///
		/// # <weight>
		/// - `O(1)`
		/// - 1 storage mutation
		/// # </weight>
		#[pallet::weight(10_000 + T::DbWeight::get().writes(1))]
		pub fn store_lyrics(origin: OriginFor<T>, song_line: SongLine) -> DispatchResult {
			// Ensure that the origin represents an unsigned extrinsic.
			ensure_none(origin)?;
			// check if song line is not empty
			ensure!(!song_line.is_empty(), Error::<T>::SongLineEmpty);
			// Update storage.
			<SongLineStorage<T>>::put(song_line.clone());
			// Emit an event.
			Self::deposit_event(Event::SongLineEmitted(song_line));
			// Return a successful DispatchResultWithPostInfo
			Ok(())
		}
	}

	#[pallet::inherent]
	impl<T: Config> ProvideInherent for Pallet<T> {
		type Call = Call<T>;
		type Error = InherentError;
		const INHERENT_IDENTIFIER: InherentIdentifier = INHERENT_IDENTIFIER;

		fn create_inherent(data: &InherentData) -> Option<Self::Call> {
			let verse = data
				.get_data::<SongLine>(&INHERENT_IDENTIFIER)
				.expect("Song lyrics inherent data not correctly encoded")
				.expect("Song lyrics must be provided");
			info!("ðŸŽ¤ Storing song verse in storage: {}", str::from_utf8(&verse).unwrap());
			Some(Call::store_lyrics { song_line: verse } )
		}

		fn is_inherent(call: &Self::Call) -> bool {
			info!("ðŸŽ¤ Checking if call {:?} is inherent", call);
			matches!(call, Call::store_lyrics { .. })
		}
	}

	#[derive(codec::Encode, sp_runtime::RuntimeDebug)]
	#[cfg_attr(feature = "std", derive(codec::Decode))]
	pub enum InherentError {
	}

	impl sp_inherents::IsFatalError for InherentError {
		fn is_fatal_error(&self) -> bool {
			false
		}
	}

	pub const INHERENT_IDENTIFIER: sp_inherents::InherentIdentifier = *b"kara0ke!";
}
